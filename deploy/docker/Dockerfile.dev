# Usa la imagen oficial de PHP con alpine
FROM php:8.3-fpm-alpine

# Instala las dependencias necesarias
RUN apk --no-cache add \
    nginx \
    build-base \
    libpng-dev \
    libjpeg-turbo-dev \
    libwebp-dev \
    libxpm-dev \
    freetype-dev \
    libzip-dev \
    zip \
    unzip \
    git \
    bash \
    fcgi \
    supervisor \
    libmcrypt-dev \
    oniguruma-dev \
    postgresql-dev

# Clear cache
RUN rm -rf /var/cache/apk/*

# Install PHP extensions
RUN docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp \
    && docker-php-ext-install gd \
    && docker-php-ext-install pdo pdo_mysql pdo_pgsql mbstring zip exif pcntl bcmath opcache

# Variable de entorno para ejecutar composer como root
ENV COMPOSER_ALLOW_SUPERUSER=1

# Instalar Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Configura Nginx y Supervisor
RUN mkdir -p /run/nginx
RUN mkdir -p /var/log/supervisor

# Copiar todo el entorno
COPY . /var/www/html/

#Copia el archivo de configuraci√≥n de Nginx script y php.ini
COPY ./deploy/nginx/nginx.conf /etc/nginx/nginx.conf
COPY ./deploy/supervisord.conf /etc/supervisord.conf
COPY ./deploy/register_service.sh /register_service.sh
COPY /deploy/php.ini "$PHP_INI_DIR/conf.d/app.ini"

# Se establece el directorio de trabajo
WORKDIR /var/www/html/

# Establecer permisos adecuados para los directorios storage y bootstrap/cache
# RUN chown -R www-data:www-data /var/www/html
RUN chmod -R 777 /var/www/html/storage

# Instalar dependencias
RUN composer install

# Exponer el puerto 80
EXPOSE 80

RUN chmod +x /register_service.sh

# Comando para correr PHP-FPM y Nginx juntos
CMD ["/bin/sh", "-c", "/register_service.sh && supervisord -c /etc/supervisord.conf"]